function createPhoneNumber(array $digits): string {
  return sprintf("(%d%d%d) %d%d%d-%d%d%d%d", ...$digits);
}

Solution 2:
function createPhoneNumber($numbersArray) {
  return vsprintf("(%d%d%d) %d%d%d-%d%d%d%d", $numbersArray);
}

Solution 3:
function createPhoneNumber($numbersArray) {
    //input validation
    if (count($numbersArray) !== 10) {
        throw new \InvalidArgumentException('invalid input: must be 10 digits');
    }
    foreach ($numbersArray as $digit) {
        if ($digit< 0 || $digit >9) {
            throw new \InvalidArgumentException('invalid input: each value should be between 0 and 9');
        }
    }
    
    //output processing
    return sprintf(
        '(%s) %s-%s',
        $numbersArray[0] . $numbersArray[1] . $numbersArray[2],
        $numbersArray[3] . $numbersArray[4] . $numbersArray[5],
        $numbersArray[6] . $numbersArray[7] . $numbersArray[8] . $numbersArray[9]
    );
}
Solution 4:
function createPhoneNumber($numbersArray) {
  preg_match('/(\d{3})(\d{3})(\d{4})/', implode('', $numbersArray), $matches);
  return '('.$matches[1].') '.$matches[2].'-'.$matches[3];
}
